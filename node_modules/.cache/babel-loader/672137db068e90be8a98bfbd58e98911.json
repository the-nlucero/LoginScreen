{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dragon Slayer\\\\Desktop\\\\newProject\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; //Groups Together Email Entered And Validation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction emailReducer(state, action) {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n}\n\n; //Groups Together Password Entered And Validation\n\nfunction passwordReducer(state, action) {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n}\n\n;\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); //Initialize Reducers\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n    return () => {\n      console.log('Effect Cleanuip');\n    };\n  }, []); //Used to not overload network with HTTP requests\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking For Validity!'); //Checks Validity\n\n      setFormIsValid(emailState.isValid && passwordState.isValid);\n    }, 500); //CleanUp Function is Ran After First Side-Effect Function\n\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    };\n  }, [emailState, passwordState]);\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(  \n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(  \n    //   emailState.value.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"S9PzA81pqaAyr0fMhe+CeImyoIY=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Dragon Slayer/Desktop/newProject/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","console","log","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\n\n//Groups Together Email Entered And Validation\nfunction emailReducer(state, action) {\n  if(action.type === 'USER_INPUT'){\n    \n    return {\n      value: action.val, \n      isValid: action.val.includes('@') }\n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {\n      value: state.value, \n      isValid: state.value.includes('@') }\n  }\n  \n    return {\n      value: '', \n      isValid: false}\n};\n\n//Groups Together Password Entered And Validation\nfunction passwordReducer(state, action) {\n  if(action.type === 'USER_INPUT'){\n    \n    return {\n      value: action.val, \n      isValid: action.val.trim().length > 6 }\n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {\n      value: state.value, \n      isValid: state.value.trim().length > 6 }\n  }\n  \n    return {\n      value: '', \n      isValid: false}\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n\n  //Initialize Reducers\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {value: '', isValid: null});\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {value: '', isValid: null});\n\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n\n    return () => {\n      console.log('Effect Cleanuip');\n    } \n  }, []);\n\n   //Used to not overload network with HTTP requests\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking For Validity!');\n    //Checks Validity\n    setFormIsValid(  \n      emailState.isValid && passwordState.isValid\n    );\n    }, 500);\n    \n    //CleanUp Function is Ran After First Side-Effect Function\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n\n    }; \n\n  }, [emailState, passwordState])\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n\n    // setFormIsValid(  \n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value});\n  \n    // setFormIsValid(  \n    //   emailState.value.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n  dispatchEmail({type: 'INPUT_BLUR'})\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({type: 'INPUT_BLUR'})\n  };\n\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}
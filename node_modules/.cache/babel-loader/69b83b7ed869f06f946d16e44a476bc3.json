{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dragon Slayer\\\\Desktop\\\\LoginScreen\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../store/auth-context';\nimport Input from '../UI/Input/Input'; //Groups Together Email Entered Values And Validation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction emailReducer(state, action) {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n}\n\n; //Groups Together Password Entered Values And Validation\n\nfunction passwordReducer(state, action) {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n}\n\n;\n\nconst Login = props => {\n  _s();\n\n  const [formIsValid, setFormIsValid] = useState(false); //Initialize Reducers\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  const ctx = useContext(AuthContext);\n  useEffect(() => {\n    console.log('Timer is Running');\n    return () => {\n      console.log('User Finished Typing');\n    };\n  }, []); //Allows program to STOP updating once validity is met\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState; //Used to not overload network with constant HTTP requests\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      console.log('Checking For Validity!'); //Checks Validity\n\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 850); //Clears and Restarts Timer when User types again\n    //Runs BEFORE the FIRST Side Effect\n\n    return () => {\n      console.log('User Started Typing');\n      clearTimeout(timer);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    ctx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-Mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"GiPctIiC/oYyNy0UMKHjUzh5ndU=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Dragon Slayer/Desktop/LoginScreen/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","ctx","console","log","emailIsValid","passwordIsValid","timer","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../store/auth-context';\nimport Input from '../UI/Input/Input';\n\n//Groups Together Email Entered Values And Validation\nfunction emailReducer(state, action) {\n  if(action.type === 'USER_INPUT'){\n    \n    return {\n      value: action.val, \n      isValid: action.val.includes('@') }\n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {\n      value: state.value, \n      isValid: state.value.includes('@') }\n  }\n  \n    return {\n      value: '', \n      isValid: false}\n};\n\n//Groups Together Password Entered Values And Validation\nfunction passwordReducer(state, action) {\n  if(action.type === 'USER_INPUT'){\n    \n    return {\n      value: action.val, \n      isValid: action.val.trim().length > 6 }\n  }\n\n  if(action.type === 'INPUT_BLUR')\n  {\n    return {\n      value: state.value, \n      isValid: state.value.trim().length > 6 }\n  }\n  \n    return {\n      value: '', \n      isValid: false}\n};\n\nconst Login = (props) => {\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  //Initialize Reducers\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {value: '', isValid: null});\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {value: '', isValid: null});\n\n  const ctx = useContext(AuthContext);\n\n  useEffect(() => {\n    console.log('Timer is Running');\n\n    return () => {\n      console.log('User Finished Typing');\n    } \n  }, []);\n\n  //Allows program to STOP updating once validity is met\n  const {isValid: emailIsValid} = emailState;\n  const {isValid: passwordIsValid} = passwordState;\n\n\n   //Used to not overload network with constant HTTP requests\n  useEffect(() => {\n    const timer = setTimeout(() => {\n    \n      console.log('Checking For Validity!');\n    \n    //Checks Validity\n    setFormIsValid( emailIsValid && passwordIsValid);\n    }, 850);\n    \n    //Clears and Restarts Timer when User types again\n    //Runs BEFORE the FIRST Side Effect\n    return () => {\n      console.log('User Started Typing');\n      clearTimeout(timer);\n\n    }; \n\n  }, [emailIsValid, passwordIsValid])\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value});\n  };\n\n  const validateEmailHandler = () => {\n  dispatchEmail({type: 'INPUT_BLUR'})\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({type: 'INPUT_BLUR'})\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    ctx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <Input \n          id='email' \n          label='E-Mail' \n          type='email' \n          isValid={emailIsValid}\n          value={emailState.value}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n          /> \n        <Input \n          id='password' \n          label='Password' \n          type='password' \n          isValid={passwordIsValid}\n          value={passwordState.value}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n        /> \n        <div className={classes.actions}>\n          <Button \n            type=\"submit\" \n            className={classes.btn} \n            disabled={!formIsValid}\n          >\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}